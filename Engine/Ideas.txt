- FORTSÄTT
	Gjort jobb med units
		Lägg upp tester härnäst
		Number.Add
		Number.Multiply
		Number.Subtract - Number.Add + Negate

	GetProductUnit
		Ska returnera resultat-enhet vid multiplikation, ex. m * m = m^2

	GetSumUnit
		Returnerar resultat-enhet vid addition, ex
			m + mm = m (använd den som står först)
			12:45 + 5min = 12:50 (Time)
			5min + 12:45 = 12:50 (Time)
			1h + 5min - 3s = 1:04:57 (TimeInterval)
			2021-02-13 + 3d = 2021-02-16 (Date + DateInterval = Date)
			2021-02-13 + 3d + 2h = 2021-02-16 02:00:00 (Date + DateInterval + TimeInterval = DateTime)
			2021-02-13 + 12:50 = 2021-02-13 12:50:00 (Date + Time = DateTime)

	Fixa testet 5+3m, Unit-beräkning
		Add har en statisk Calc-funktion för att kunna anropas från Subtract

	Har fixat parsning av parenteser - blir RoundBracketExpression
		Fixa PreProcess, unary operatorer
			Görs av parsern direkt efter parsning av expression
		Fixa räkning med units
		Fixa funktions-Evaluate

	Har fixat parsning av funktionsargument
		Fortsätt och skapa ParserTest som kollar att rätt exceptions kastas vid parsing-Filtrera


	Har skapat Engine.CLI för snabbare testning
		Behöver fortsätta med PreProcess - hantera function calls och parenteser här?

	Lade till Delimiters, RoundOpeningBracket
		Fortsätt i ParseExpression, efter vi har lagt till RoundOpeningBracket - anropa ParseExpression

	PreProcess kommer anropas innan Evaluate. Saker att göra där:
		Kolla att rätt typ av tokens är bredvid varje token
		Omvandla binary add/subtract till unary plus/minus där det behövs

	Ändra Calculator API m.m.

	Gjorde ParseIdentifier och lade till maps med identifier -> Type

	Gjorde Operator.Parse. Vi bör kunna göra ett ParserTest nu.

	Gjorde klart Expression.Add med DebugList-funktion som listar
	alla tokens i listan. Lade till ett ankare i Expression. Detta så att Calculator ska kunna
	modifiera listan utan att man tappar referenserna till first/last token.

- Filtrera text som klistras in i editorn
	Om man klistrar in tal med tusentalsavgränsare och komma t.ex., ändra om till standardformat
	Med tanke på funktionssyntax MÅSTE vi alltid använda "kodformat" (komma = .) och inga
	tusentalsavgränsare

API

var calc = new Calculator();

Expression expr = calc.Parse("1+2*3");

Number result = calc.Calculate(expr);

Number num = calc.Calculate("1+2*3");

calc.ClearWarnings();
